name: "Publish to PassCulture Infra Prod (EHP)"

on:
  push:

permissions:
  contents: read
  id-token: "write"

jobs:
  find-changed-images:
    runs-on: ubuntu-22.04
    outputs:
      directories: "${{ steps.changed_dir.outputs.directories }}"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - id: changed_dir
        run: |
          json_array=$(./scripts/changed_images.bash)
          echo "directories=$json_array" | tee -a $GITHUB_OUTPUT

  build-images:
    runs-on: ubuntu-22.04
    needs: find-changed-images
    if: ${{ needs.find-changed-images.outputs.directories != '' && toJson(fromJson(needs.find-changed-images.outputs.directories)) != '[]' }}
    strategy:
      matrix:
        image: ${{ fromJSON(needs.find-changed-images.outputs.directories) }}
    steps:
      - uses: actions/checkout@v4

      - name: Authenticate with GCP (OIDC)
        uses: google-github-actions/auth@v2
        id: openid-auth
        with:
          create_credentials_file: true
          token_format: "access_token"
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}

      - name: Get Secret
        id: "secrets"
        uses: "google-github-actions/get-secretmanager-secrets@v2"
        with:
          secrets: |-
            COSIGN_KMS_KEY: ${{ secrets.COSIGN_KMS_KEY}}

      # - uses: pass-culture/common-workflows/actions/docker-publisher@bsr-docker-publisher
      - uses: ./.github/actions/docker-publisher
        with:
          docker_registry_project_id: ${{ secrets.DOCKER_REGISTRY_PROJECT_ID }}
          docker_registry_region: ${{ secrets.DOCKER_REGISTRY_REGION }}
          docker_registry_repository: ${{ secrets.DOCKER_REGISTRY_REPOSITORY }}
          image_name: ${{ matrix.image }}
          version: ${{ github.ref_name }}
          cosign_kms_key: ${{ steps.secrets.outputs.COSIGN_KMS_KEY }}
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.ARTIFACT_REGISTRY_SERVICE_ACCOUNT }}
          passculture_github_action_app_id: ${{ secrets.PASSCULTURE_GITHUB_ACTION_APP_ID }}
          passculture_github_action_app_private_key: ${{ secrets.PASSCULTURE_GITHUB_ACTION_APP_PRIVATE_KEY }}

  # build-tagged-image:
  #   runs-on: ubuntu-22.04
  #   if: startsWith(github.ref, 'refs/tags/')
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         ref: ${{ github.ref }}
  #         fetch-depth: 0
  #         submodules: true

  #     - name: Authenticate with GCP (OIDC)
  #       uses: google-github-actions/auth@v2
  #       id: openid-auth
  #       with:
  #         create_credentials_file: true
  #         token_format: "access_token"
  #         workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
  #         service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}

  #     - name: Get Secret
  #       id: "secrets"
  #       uses: "google-github-actions/get-secretmanager-secrets@v2"
  #       with:
  #         secrets: |-
  #           COSIGN_KMS_KEY:${{ secrets.COSIGN_KMS_KEY}}

  #     - name: Check tag format
  #       run: |
  #         if ! echo "${{ github.ref }}" | grep -E '^refs/tags/[^/]*/v[0-9]'; then
  #           echo "â›” Invalid tag format: must match 'refs/tags/<folder>/v<version>'"
  #           exit 1
  #         fi

  #     - id: vars
  #       run: |
  #         echo "img_name=$(echo ${{ github.ref }} | awk -F'/' '{print $3}')" >> $GITHUB_OUTPUT
  #         echo "version=$(echo ${{ github.ref }} | awk -F'/' '{print $4}')" >> $GITHUB_OUTPUT

  #     - uses: ./.github/actions/docker-publisher
  #     # - uses: pass-culture/common-workflows/actions/docker-publisher@bsr-docker-publisher
  #       with:
  #         docker_registry_project_id: ${{ secrets.DOCKER_REGISTRY_PROJECT_ID }}
  #         docker_registry_region: ${{ secrets.DOCKER_REGISTRY_REGION }}
  #         docker_registry_repository: ${{ secrets.DOCKER_REGISTRY_REPOSITORY }}
  #         image_name: ${{ steps.vars.outputs.img_name }}
  #         version: ${{ steps.vars.outputs.version }}
  #         cosign_kms_key: ${{ steps.secrets.outputs.COSIGN_KMS_KEY }}
  #         workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
  #         service_account: ${{ secrets.ARTIFACT_REGISTRY_SERVICE_ACCOUNT }}
  #         passculture_github_action_app_id: ${{ secrets.PASSCULTURE_GITHUB_ACTION_APP_ID }}
  #         passculture_github_action_app_private_key: ${{ secrets.PASSCULTURE_GITHUB_ACTION_APP_PRIVATE_KEY }}
